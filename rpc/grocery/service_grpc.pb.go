// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grocery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroceryServiceClient is the client API for GroceryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroceryServiceClient interface {
	CreateGrocery(ctx context.Context, in *CreateGroceryRequest, opts ...grpc.CallOption) (*CreateGroceryResponse, error)
	GetGrocery(ctx context.Context, in *GetGroceryRequest, opts ...grpc.CallOption) (*GetGroceryResponse, error)
	UpdateGrocery(ctx context.Context, in *UpdateGroceryRequest, opts ...grpc.CallOption) (*UpdateGroceryResponse, error)
	DeleteGrocery(ctx context.Context, in *DeleteGroceryRequest, opts ...grpc.CallOption) (*DeleteGroceryResponse, error)
	ListGrocery(ctx context.Context, in *ListGroceryRequest, opts ...grpc.CallOption) (*ListGroceryResponse, error)
}

type groceryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroceryServiceClient(cc grpc.ClientConnInterface) GroceryServiceClient {
	return &groceryServiceClient{cc}
}

func (c *groceryServiceClient) CreateGrocery(ctx context.Context, in *CreateGroceryRequest, opts ...grpc.CallOption) (*CreateGroceryResponse, error) {
	out := new(CreateGroceryResponse)
	err := c.cc.Invoke(ctx, "/service.GroceryService/CreateGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groceryServiceClient) GetGrocery(ctx context.Context, in *GetGroceryRequest, opts ...grpc.CallOption) (*GetGroceryResponse, error) {
	out := new(GetGroceryResponse)
	err := c.cc.Invoke(ctx, "/service.GroceryService/GetGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groceryServiceClient) UpdateGrocery(ctx context.Context, in *UpdateGroceryRequest, opts ...grpc.CallOption) (*UpdateGroceryResponse, error) {
	out := new(UpdateGroceryResponse)
	err := c.cc.Invoke(ctx, "/service.GroceryService/UpdateGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groceryServiceClient) DeleteGrocery(ctx context.Context, in *DeleteGroceryRequest, opts ...grpc.CallOption) (*DeleteGroceryResponse, error) {
	out := new(DeleteGroceryResponse)
	err := c.cc.Invoke(ctx, "/service.GroceryService/DeleteGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groceryServiceClient) ListGrocery(ctx context.Context, in *ListGroceryRequest, opts ...grpc.CallOption) (*ListGroceryResponse, error) {
	out := new(ListGroceryResponse)
	err := c.cc.Invoke(ctx, "/service.GroceryService/ListGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroceryServiceServer is the server API for GroceryService service.
// All implementations must embed UnimplementedGroceryServiceServer
// for forward compatibility
type GroceryServiceServer interface {
	CreateGrocery(context.Context, *CreateGroceryRequest) (*CreateGroceryResponse, error)
	GetGrocery(context.Context, *GetGroceryRequest) (*GetGroceryResponse, error)
	UpdateGrocery(context.Context, *UpdateGroceryRequest) (*UpdateGroceryResponse, error)
	DeleteGrocery(context.Context, *DeleteGroceryRequest) (*DeleteGroceryResponse, error)
	ListGrocery(context.Context, *ListGroceryRequest) (*ListGroceryResponse, error)
	mustEmbedUnimplementedGroceryServiceServer()
}

// UnimplementedGroceryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroceryServiceServer struct {
}

func (UnimplementedGroceryServiceServer) CreateGrocery(context.Context, *CreateGroceryRequest) (*CreateGroceryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGrocery not implemented")
}
func (UnimplementedGroceryServiceServer) GetGrocery(context.Context, *GetGroceryRequest) (*GetGroceryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrocery not implemented")
}
func (UnimplementedGroceryServiceServer) UpdateGrocery(context.Context, *UpdateGroceryRequest) (*UpdateGroceryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGrocery not implemented")
}
func (UnimplementedGroceryServiceServer) DeleteGrocery(context.Context, *DeleteGroceryRequest) (*DeleteGroceryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrocery not implemented")
}
func (UnimplementedGroceryServiceServer) ListGrocery(context.Context, *ListGroceryRequest) (*ListGroceryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrocery not implemented")
}
func (UnimplementedGroceryServiceServer) mustEmbedUnimplementedGroceryServiceServer() {}

// UnsafeGroceryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroceryServiceServer will
// result in compilation errors.
type UnsafeGroceryServiceServer interface {
	mustEmbedUnimplementedGroceryServiceServer()
}

func RegisterGroceryServiceServer(s grpc.ServiceRegistrar, srv GroceryServiceServer) {
	s.RegisterService(&GroceryService_ServiceDesc, srv)
}

func _GroceryService_CreateGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroceryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServiceServer).CreateGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GroceryService/CreateGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServiceServer).CreateGrocery(ctx, req.(*CreateGroceryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroceryService_GetGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroceryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServiceServer).GetGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GroceryService/GetGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServiceServer).GetGrocery(ctx, req.(*GetGroceryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroceryService_UpdateGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroceryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServiceServer).UpdateGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GroceryService/UpdateGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServiceServer).UpdateGrocery(ctx, req.(*UpdateGroceryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroceryService_DeleteGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroceryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServiceServer).DeleteGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GroceryService/DeleteGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServiceServer).DeleteGrocery(ctx, req.(*DeleteGroceryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroceryService_ListGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroceryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServiceServer).ListGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GroceryService/ListGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServiceServer).ListGrocery(ctx, req.(*ListGroceryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroceryService_ServiceDesc is the grpc.ServiceDesc for GroceryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroceryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.GroceryService",
	HandlerType: (*GroceryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGrocery",
			Handler:    _GroceryService_CreateGrocery_Handler,
		},
		{
			MethodName: "GetGrocery",
			Handler:    _GroceryService_GetGrocery_Handler,
		},
		{
			MethodName: "UpdateGrocery",
			Handler:    _GroceryService_UpdateGrocery_Handler,
		},
		{
			MethodName: "DeleteGrocery",
			Handler:    _GroceryService_DeleteGrocery_Handler,
		},
		{
			MethodName: "ListGrocery",
			Handler:    _GroceryService_ListGrocery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
